// Flutter App Expert .cursorrules

// Flexibility Notice

// Note: This is a recommended project structure, but be flexible and adapt to existing project structures.
// Do not enforce these structural patterns if the project follows a different organization.
// Focus on maintaining consistency with the existing project architecture while applying Flutter best practices.

// Flutter Best Practices

const flutterBestPractices = [
  "Adapt to existing project architecture while maintaining clean code principles",
  "Use Flutter 3.x features and Material 3 design",
  "Implement clean architecture with feature-first organization",
  "Use Riverpod (or Flutter Hooks) for state management",
  "Implement dependency injection using GetIt or Riverpod",
  "Follow proper error handling using Either/Result types",
  "Apply animation patterns using AnimatedBuilder, AnimatedSwitcher, etc.",
  "Follow platform-specific UX guidelines (Android/iOS)",
  "Implement localization and internationalization via Flutter's l10n tools",
];

// Project Structure

// Note: This is a reference structure. Adapt to the project's existing organization.

const projectStructure = `
lib/
  core/
    constants/
    theme/
    utils/
    widgets/
    services/
  features/
    feature_name/
      data/
        datasources/
        models/
        repositories_impl/
      domain/
        entities/
        repositories/
        usecases/
      presentation/
        providers/
        pages/
        widgets/
  l10n/
  main.dart
  router.dart
test/
  unit/
  widget/
  integration/
`;

// Coding Guidelines

const codingGuidelines = `
1. Use null safety throughout the app
2. Prefer immutable data models (freezed)
3. Apply functional error handling using Either or Result
4. Follow Dart naming conventions (camelCase for variables, PascalCase for classes)
5. Compose small reusable widgets
6. Use GoRouter for declarative routing
7. Use Riverpod's providers for app state and dependency injection
8. Validate forms using declarative validators or custom hooks
9. Manage assets with centralized paths/constants
10. Maintain high test coverage (unit, widget, integration)
`;

// Widget Guidelines

const widgetGuidelines = `
1. Create small, single-responsibility widgets
2. Use const constructors wherever possible
3. Use GlobalKey or ValueKey where needed for widget identification
4. Follow responsive layout and accessibility standards
5. Avoid deep widget nesting, use composition
6. Animate UI changes with AnimatedSwitcher, Hero, etc.
7. Optimize for rebuild performance using Consumer/Selector
8. Respect accessibility (semantic labels, contrast, gestures)
`;

// Performance Guidelines

const performanceGuidelines = `
1. Lazy-load and cache images properly
2. Optimize ListView/GridView with itemBuilder and cacheExtent
3. Memoize expensive computations or selectors
4. Minimize unnecessary widget rebuilds
5. Dispose unused providers and controllers properly
6. Profile with DevTools for performance bottlenecks
7. Use platform channels judiciously for native integration
8. Enable tree-shaking and minification for builds
`;

// Testing Guidelines

const testingGuidelines = `
1. Write unit tests for domain logic and use cases
2. Add widget tests for UI components and user flows
3. Use integration tests for complete features (e.g., add/edit task)
4. Mock repositories and services cleanly using mocktail or Mockito
5. Structure test folders similar to feature folders
6. Ensure descriptive and scoped test names
7. Integrate CI/CD for automatic test execution
`;

